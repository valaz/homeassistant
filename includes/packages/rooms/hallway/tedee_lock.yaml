hallway_tedee_lock:
  timer:
    hallway_door_pull_spring:
      name: "–ó–∞–ø—É—â–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–≤–µ—Ä–∏"
      duration: "00:00:03"

  binary_sensor:
    - platform: template
      sensors:
        c_should_open_main_door:
          friendly_name: "Should pull spring"
          value_template: >-
            {{ is_state('binary_sensor.azat_at_home', 'on')
              or is_state('device_tracker.private_ble_device_00025d', 'home')
              or (as_timestamp(now()) | int - as_timestamp(states.lock.z_intercom.last_changed) < 210)
              or (as_timestamp(now()) | int - as_timestamp(states.lock.r_intercom.last_changed) < 210)
            }}
        c_should_warmup_intercom_door:
          friendly_name: "Should warmup intercom door"
          value_template: >-
            {% set last_changed = states.lock.z_intercom.last_changed %}
            {% set two_hours_ago = now() - timedelta(hours=24) %}
            {{ last_changed <= two_hours_ago }}

  script:
    main_door_try_unlock:
      alias: "[Door Lock] Try to unlock"
      sequence:
        - if:
            - condition: template
              value_template: "{{ is_state('lock.lock_febb', 'locked') or is_state('binary_sensor.lock_febb_semi_locked', 'on')}}"
          then:
            - service: lock.unlock
              target:
                entity_id: lock.lock_febb

    main_door_try_open:
      alias: "[Door Lock] Try to open"
      sequence:
        - wait_template: "{{ is_state('lock.lock_febb', 'unlocked') and is_state('binary_sensor.lock_febb_semi_locked', 'off') }}"
          timeout: 5
          continue_on_timeout: false
        - service: lock.open
          target:
            entity_id: lock.lock_febb

  lock:
    - platform: template
      unique_id: c_hallway_main_door
      name: Main Door
      value_template: "{{ is_state('lock.lock_febb', 'locked') or is_state('timer.hallway_door_pull_spring', 'idle') }}"
      lock:
        - service: lock.lock
          target:
            entity_id: lock.lock_febb
      unlock:
        - service: script.main_door_try_unlock
        - if:
            - condition: state
              entity_id: binary_sensor.c_should_open_main_door
              state: "on"
          then:
            - service: script.main_door_try_open
          else:
            - service: notify.mobile_app_iphone_15_az
              data:
                message: –î–≤–µ—Ä—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ –Ω–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è
        - service: timer.start
          target:
            entity_id: timer.hallway_door_pull_spring

  automation:
    - alias: "[Main Door Lock] Unlock from mobile"
      mode: restart
      initial_state: true
      trigger:
        - platform: event
          event_type: ios.action_fired
          event_data:
            actionID: 19A87280-525B-4C18-90B3-8F1E39A347A7
      action:
        - service: lock.unlock
          target:
            entity_id: lock.main_door

    - alias: "[Main Door Lock] Ask to Unlock"
      mode: restart
      initial_state: true
      trigger:
        - platform: state
          entity_id: device_tracker.private_ble_device_00025d
          from: "not_home"
          to: "home"
      condition:
        - condition: state
          entity_id: binary_sensor.azat_at_home
          state: "off"
        - condition: template
          value_template: "{{ (as_timestamp(now()) - as_timestamp(states.lock.main_door.last_changed)) > 600 }}"
      action:
        - service: script.ask_to_unlock_main_door

    - alias: "[Main Door Lock] Autolock if no people at home"
      mode: restart
      initial_state: true
      trigger:
        - platform: state
          entity_id: binary_sensor.people_at_home
          to: "off"
          for: "00:01:00"
      action:
        - service: lock.lock
          target:
            entity_id: lock.lock_febb
        - service: notify.tg_valaz
          data:
            message: "üîí –î–≤–µ—Ä—å –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –¥–æ–º–∞"
        - service: script.send_sms_to_azat
          data:
            message: "üîí –î–≤–µ—Ä—å –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –¥–æ–º–∞"

    - alias: "[Main Door Lock] Fix Semilock"
      mode: restart
      initial_state: true
      triggers:
        trigger: state
        entity_id: binary_sensor.lock_febb_semi_locked
        to: "on"
        for: "00:01:00"
      conditions:
        - condition: state
          entity_id: binary_sensor.people_at_home
          state: "on"
      action:
        - service: lock.unlock
          target:
            entity_id: lock.lock_febb

    - alias: "[Main Door Lock] Fix Semilock by Door"
      mode: restart
      initial_state: true
      triggers:
        trigger: state
        entity_id: binary_sensor.hallway_door_sensor_contact
        from: "on"
        to: "off"
        for: "00:00:10"
      conditions:
        - condition: state
          entity_id: binary_sensor.lock_febb_semi_locked
          state: "on"
      action:
        - service: lock.unlock
          target:
            entity_id: lock.lock_febb
