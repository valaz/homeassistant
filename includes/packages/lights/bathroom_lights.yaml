bathroom_lights:
  timer:
    bathroom_light_turn_off:
      name: "Свет в ванной выключится через "
      duration: "00:03:00"

  sensor:
    - platform: template
      sensors:
        c_bathroom_light_brightness_schedule:
          friendly_name: "Яркость лампы Aqara в спальне"
          value_template: >
            {% set hour = now().hour %}
            {% if 5 <= hour and hour < 21 %}
              230
            {% elif 21 <= hour and hour < 23 %}
              192
            {% else %}
              99
            {% endif %}

        c_bathroom_light_color_temp_schedule:
          friendly_name: "Температура лампы Aqara в спальне"
          value_template: >
            {% set hour = now().hour %}
            {% set min_temp = state_attr('light.c_bathroom', 'min_mireds') %}
            {% set max_temp = state_attr('light.c_bathroom', 'max_mireds') %}
            {% if 5 <= hour and hour < 21 %}
              {{ 0.5 * (max_temp  - min_temp) + min_temp | round(0) }}
            {% elif 21 <= hour and hour < 23 %}
              {{ 0.7 * (max_temp  - min_temp) + min_temp | round(0) }}
            {% else %}
              {{ 0.9 * (max_temp  - min_temp) + min_temp | round(0) }}
            {% endif %}

        c_bathroom_lr_log_prediction:
          value_template: >
            {{ state_attr('sun.sun','elevation') | float * 0.01441 + 3.65051 }}

        c_bathroom_log_correction:
          value_template: >
            {% if state_attr('sun.sun','elevation') <= 13.745 %}
              -1.083 
            {% else %}
              {% if state_attr('sun.sun','azimuth') <= 135.287 %}
                -0.085 
              {% elif state_attr('sun.sun','elevation') <= 49.553 %}
                0.216 
              {% else %}
                -0.055 
              {% endif %}            
            {% endif %}

        c_bathroom_lx_prediction:
          friendly_name: "Bathroom Illuminance AI v1"
          value_template: >
            {% if state_attr('sun.sun','elevation') <= 0 %}
              0 
            {% else %}
              {{ e**(states('sensor.c_bathroom_lr_log_prediction')|float + states('sensor.c_bathroom_log_correction')|float) - 1 }}          
            {% endif %}
          unit_of_measurement: lx
          device_class: illuminance

        c_bathroom_lx_func:
          friendly_name: "Bathroom Illuminance func AI v2"
          value_template: >
            {% set elevation_value = state_attr('sun.sun','elevation') %}
            {% set elevation_index = -0.28256257505674626 %}
            {% set azimuth_value = state_attr('sun.sun','azimuth') %}
            {% set azimuth_index = -0.012541141050843814 %}
            {% set cloud_coverage_value = state_attr('weather.forecast_tegel_home','cloud_coverage') %}
            {% set cloud_coverage_index = 0.029587416540465414 %}
            {% set door_value = 0 %}
            {% set door_index = 0.09654319664050931 %}
            {% set cloudy_value = 0 %}
            {% set cloudy_index = -0.758920253038008 %}
            {% set partlycloudy_value = 0 %}
            {% set partlycloudy_index = 0 %}
            {% set rainy_value = 0 %}
            {% set rainy_index = 1.1918680896075657 %}
            {% set sunny_value = 0 %}
            {% set sunny_index = 1.0671404452982214 %}
            {% set free_value = 1 %}
            {% set free_index = 3.8438701283568815 %}
            {% if states('binary_sensor.0x00158d0006e4e280_contact') == 'on' %}
              {% set door_value = 1 %}
            {% endif %}
            {% if states('weather.forecast_tegel_home') == 'cloudy' %}
              {% set cloudy_value = 1 %}
            {% elif states('weather.forecast_tegel_home') == 'partlycloudy' %}
              {% set partlycloudy_value = 1 %}
            {% elif states('weather.forecast_tegel_home') == 'rainy' %}
              {% set rainy_value = 1 %}
            {% elif states('weather.forecast_tegel_home') == 'sunny' %}
              {% set sunny_value = 1 %}
            {% endif %}
            {% set x =  elevation_value * elevation_index +  azimuth_value * azimuth_index + cloud_coverage_value*cloud_coverage_index + door_value * door_index + cloudy_value * cloudy_index + partlycloudy_value * partlycloudy_index + rainy_value * rainy_index + sunny_value * sunny_index + free_value * free_index %}
            {{ 1/(1 + e** (-1 * x)) }}

  switch:
    - platform: template
      switches:
        c_bathroom_light_auto_off:
          friendly_name: "Light Auto OFF"
          value_template: "{{is_state('automation.bathroom_lights_turn_off_light_if_there_is_no_movements', 'on')}}"
          turn_on:
            - service: automation.turn_on
              target:
                entity_id: automation.bathroom_lights_turn_off_light_if_there_is_no_movements
          turn_off:
            - service: automation.turn_off
              target:
                entity_id: automation.bathroom_lights_turn_off_light_if_there_is_no_movements

  light:
    - platform: template
      lights:
        c_bathroom:
          friendly_name: "Bathroom Light"
          value_template: "{{ is_state('switch.bathroom_light_switch', 'on') and is_state('light.bathroom_lamp', 'on') }}"
          level_template: "{{ state_attr('light.bathroom_lamp', 'brightness') }}"
          temperature_template: "{{ state_attr('light.bathroom_lamp', 'color_temp') }}"
          supports_transition_template: True
          min_mireds_template: "{{ state_attr('light.bathroom_lamp', 'min_mireds') }}"
          max_mireds_template: "{{ state_attr('light.bathroom_lamp', 'max_mireds') }}"
          turn_on:
            - service: switch.turn_on
              data:
                entity_id: switch.bathroom_light_switch
            - service: light.turn_on
              data:
                entity_id: light.bathroom_lamp
          turn_off:
            - service: light.turn_off
              data:
                entity_id: light.bathroom_lamp
            - service: switch.turn_off
              data:
                entity_id: switch.bathroom_light_switch
          set_level:
            service: light.turn_on
            target:
              entity_id: light.bathroom_lamp
            data_template:
              brightness: "{{ brightness }}"
          set_temperature:
            service: light.turn_on
            target:
              entity_id: light.bathroom_lamp
            data_template:
              color_temp: "{{ color_temp }}"

  automation:
    - alias: "[Bathroom Lights] Turn on light if there is movement"
      trigger:
        - platform: state
          entity_id: binary_sensor.bathroom_presence_sensor_occupancy
          to: "on"
        - platform: state
          entity_id: binary_sensor.bathroom_motion_sensor_occupancy
          to: "on"
        - platform: state
          entity_id: sensor.bathroom_motion_sensor_illuminance_lux
      condition:
        - condition: numeric_state
          entity_id: sensor.bathroom_motion_sensor_illuminance_lux
          below: 50
        - condition: or
          conditions:
            - condition: state
              entity_id: binary_sensor.bathroom_presence_sensor_occupancy
              state: "on"
            - condition: state
              entity_id: binary_sensor.bathroom_motion_sensor_occupancy
              state: "on"
      action:
        - service: light.turn_on
          target:
            entity_id: light.c_bathroom

    - alias: "[Bathroom Lights] Turn off light if there is no movements"
      trigger:
        - platform: state
          entity_id: binary_sensor.bathroom_presence_sensor_occupancy
          to: "off"
          for: "00:01:00"
        - platform: state
          entity_id: binary_sensor.bathroom_motion_sensor_occupancy
          to: "off"
          for: "00:00:00"
        - platform: event
          event_type: timer.finished
          event_data:
            entity_id: timer.bathroom_light_turn_off
      condition:
        - condition: state
          entity_id: binary_sensor.bathroom_presence_sensor_occupancy
          state: "off"
        - condition: state
          entity_id: binary_sensor.bathroom_motion_sensor_occupancy
          state: "off"
      action:
        - service: light.turn_off
          target:
            entity_id: light.c_bathroom

    - alias: "[Bathroom Lights] Start timer if light turned on manually"
      trigger:
        - platform: state
          entity_id: light.c_bathroom
          to: "on"
      condition:
        condition: state
        entity_id: binary_sensor.bathroom_presence_sensor_occupancy
        state: "off"
      action:
        - service: timer.cancel
          target:
            entity_id: timer.bathroom_light_turn_off
        - service: timer.start
          target:
            entity_id: timer.bathroom_light_turn_off

    - alias: "[Bathroom Lights] Cancel timer if there is movement"
      trigger:
        - platform: state
          entity_id: binary_sensor.bathroom_presence_sensor_occupancy
          to: "on"
        - platform: state
          entity_id: binary_sensor.bathroom_motion_sensor_occupancy
          to: "on"
        - platform: state
          entity_id: light.c_bathroom
          to: "off"
      action:
        - service: timer.cancel
          target:
            entity_id: timer.bathroom_light_turn_off

    - alias: "[Bathroom Lights] Fix Main Light"
      mode: restart
      initial_state: true
      trigger:
        - platform: state
          entity_id: input_select.c_livingroom_light_mode
          to: "normal"
        - platform: state
          entity_id: light.c_bathroom
          to: "on"
        - platform: state
          entity_id: sensor.c_bathroom_light_brightness_schedule
        - platform: state
          entity_id: sensor.c_bathroom_light_color_temp_schedule
        - platform: time_pattern
          minutes: "/10"
      condition:
        - condition: state
          entity_id: light.c_bathroom
          state: "on"
        - condition: not
          conditions:
            - condition: state
              entity_id: input_select.c_livingroom_light_mode
              state: "saloon"
      action:
        - service: light.turn_on
          entity_id: light.bathroom_lamp
          data_template:
            brightness: >
              {{ states('sensor.c_bathroom_light_brightness_schedule') }}
            color_temp: >
              {{ states('sensor.c_bathroom_light_color_temp_schedule') }}
            # transition: 10
