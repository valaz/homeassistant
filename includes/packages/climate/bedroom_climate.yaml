bedroom_climate:
  timer:
    bedroom_sleep_mode_timer:
      name: "Начат процесс засыпания"
      duration: "01:00:10"

  alert:
    bedroom_co2_level:
      name: "Высокий уровень углекислого газа"
      message: "😮‍💨 Высокий уровень CO2 в спальне: {{states('sensor.c_bedroom_co2_density')}}"
      done_message: "✅ Уровень CO2 в спальне в норме: {{states('sensor.c_bedroom_co2_density')}}"
      entity_id: binary_sensor.c_bedroom_high_co2
      state: "on"
      repeat:
        - 5
        - 30
        - 60
      can_acknowledge: true
      skip_first: true
      notifiers:
        - tg_valaz

  binary_sensor:
    - platform: template
      sensors:
        c_bedroom_high_co2:
          friendly_name: "Bedroom High CO2 level"
          value_template: >-
            {% set current_co2_level = states('sensor.c_bedroom_co2_density') | float %}
            {% set alert_co2_level = states('input_select.c_bedroom_co2_alert_level') | float %}
            {{ current_co2_level >= alert_co2_level }}

  input_number:
    c_bedroom_target_temperature:
      name: Bedroom Target Temperature
      initial: 22
      min: 20
      max: 25
      step: 1

  input_select:
    c_bedroom_turbine_mode:
      name: Режим турбины
      options:
        - "none"
        - "recuperator"
        - "air conditioner"
        - "sleep"

    c_bedroom_circulator_mode:
      name: Режим циркулятора
      options:
        - "none"
        - "air conditioner"

    c_bedroom_co2_alert_level:
      name: Критический уровень CO2
      options:
        - 600
        - 700
        - 800
        - 900
        - 1000

    c_bedroom_fan_heater_timeout:
      name: Fan Heater Timeout
      options:
        - 1
        - 5
        - 10
        - 15
        - 20
        - 25

  sensor:
    - platform: template
      sensors:
        c_bedroom_fan_last_mode:
          friendly_name: "Bedroom Fan Last Mode"
          value_template: >-
            {% if is_state("input_select.c_bedroom_turbine_mode", "none") or is_state("input_select.c_bedroom_turbine_mode", "sleep") -%}
              {{states("sensor.c_bedroom_fan_last_mode")}}
            {%- else -%}
              {{states("input_select.c_bedroom_turbine_mode")}}
            {%- endif %}

        c_bedroom_fan_heater_active_time:
          friendly_name: "Bedroom Fan Heater Active Time"
          unit_of_measurement: "min"
          value_template: >
            {% if is_state('switch.c_bedroom_fan_heater', 'on') %}
              {{ ((now() - states.switch.c_bedroom_fan_heater.last_changed).total_seconds() / 60) | round(1) }}
            {% else %}
              0
            {% endif %}

  switch:
    - platform: template
      switches:
        c_bedroom_fan_heater:
          friendly_name: "Обогреватель"
          icon_template: mdi:radiator
          value_template: "{{is_state('switch.bedroom_heater_relay_l1', 'on') or is_state('switch.bedroom_heater_relay_l2', 'on')}}"
          turn_on:
            - service: switch.turn_on
              target:
                entity_id: switch.bedroom_heater_relay_l1
            # - service: switch.turn_on
            #   target:
            #       entity_id: switch.bedroom_heater_relay_l2
          turn_off:
            - service: switch.turn_off
              target:
                entity_id: switch.bedroom_heater_relay_l1
            - service: switch.turn_off
              target:
                entity_id: switch.bedroom_heater_relay_l2

  fan:
    - platform: template
      fans:
        bedroom_turbine:
          friendly_name: "Bedroom Turbine"
          value_template: "{{ states('switch.bedroom_fan_plug') }}"
          percentage_template: >-
            {% set power_fan_capacity = 13 %}
            {% set power_fan_and_heater_capacity = 350 %}
            {% set power_total_capacity = power_fan_capacity %}
            {% if is_state("switch.c_bedroom_fan_heater", "on") -%}
              {% set power_total_capacity = power_fan_and_heater_capacity %}
            {%- else -%}
              {% set power_total_capacity = power_fan_capacity %}
            {%- endif %}
            {% set power_fan_current = states('sensor.bedroom_fan_plug_power') | float %}
            {{100*power_fan_current/power_total_capacity}}
          turn_on:
            service: switch.turn_on
            target:
              entity_id: switch.bedroom_fan_plug
          turn_off:
            service: switch.turn_off
            target:
              entity_id: switch.bedroom_fan_plug

  script:
    fix_main_heater_timeout:
      alias: "[Bedroom Climate] Fix Fan Heater Timeout"
      icon: mdi:delete-restore
      sequence:
        - choose:
            - conditions:
                - condition: numeric_state
                  entity_id: sensor.c_bedroom_temperature
                  below: 18
              sequence:
                - service: input_select.select_option
                  target:
                    entity_id: input_select.c_bedroom_fan_heater_timeout
                  data:
                    option: "15"
            - conditions:
                - condition: numeric_state
                  entity_id: sensor.c_bedroom_temperature
                  above: 18
                  below: 19
              sequence:
                - service: input_select.select_option
                  target:
                    entity_id: input_select.c_bedroom_fan_heater_timeout
                  data:
                    option: "10"
            - conditions:
                - condition: numeric_state
                  entity_id: sensor.c_bedroom_temperature
                  above: 19
                  below: 20
              sequence:
                - service: input_select.select_option
                  target:
                    entity_id: input_select.c_bedroom_fan_heater_timeout
                  data:
                    option: "5"
            - conditions:
                - condition: numeric_state
                  entity_id: sensor.c_bedroom_temperature
                  above: 20
              sequence:
                - service: input_select.select_option
                  target:
                    entity_id: input_select.c_bedroom_fan_heater_timeout
                  data:
                    option: "1"
          default: []

  automation:
    - alias: "[Bedroom Climate] Turn on Turbine on high CO2"
      trigger:
        - platform: state
          entity_id: binary_sensor.people_at_home
          to: "on"
        - platform: numeric_state
          entity_id: sensor.c_bedroom_co2_density
          above: 500
        - platform: state
          entity_id: input_select.c_bedroom_turbine_mode
      condition:
        - condition: state
          entity_id: fan.bedroom_turbine
          state: "off"
        - condition: state
          entity_id: input_select.c_bedroom_turbine_mode
          state: "recuperator"
        - condition: numeric_state
          entity_id: sensor.c_bedroom_co2_density
          above: 500
      action:
        - service: fan.turn_on
          target:
            entity_id: fan.bedroom_turbine

    - alias: "[Bedroom Climate] Turn off Turbine on low CO2"
      trigger:
        - platform: numeric_state
          entity_id: sensor.c_bedroom_co2_density
          below: 450
          for: "00:10:00"
        - platform: state
          entity_id: input_select.c_bedroom_turbine_mode
      condition:
        - condition: state
          entity_id: fan.bedroom_turbine
          state: "on"
        - condition: state
          entity_id: input_select.c_bedroom_turbine_mode
          state: "recuperator"
        - condition: numeric_state
          entity_id: sensor.c_bedroom_co2_density
          below: 450
      action:
        - service: fan.turn_off
          target:
            entity_id: fan.bedroom_turbine

    - alias: "[Bedroom Climate] Turn on Turbine on cool weather"
      trigger:
        - platform: state
          entity_id: sensor.c_weather_temperature
        - platform: state
          entity_id: sensor.c_bedroom_temperature
        - platform: state
          entity_id: input_select.c_bedroom_turbine_mode
      condition:
        - condition: state
          entity_id: fan.bedroom_turbine
          state: "off"
        - condition: state
          entity_id: input_select.c_bedroom_turbine_mode
          state: "air conditioner"
        - condition: template
          value_template: "{{ states('sensor.c_weather_temperature') < states('sensor.c_bedroom_temperature') }}"
      action:
        - service: fan.turn_on
          target:
            entity_id: fan.bedroom_turbine

    - alias: "[Bedroom Climate] Turn off Circulator on hot weather"
      trigger:
        - platform: state
          entity_id: sensor.c_weather_temperature
        - platform: state
          entity_id: sensor.c_bedroom_temperature
        - platform: state
          entity_id: input_select.c_bedroom_circulator_mode
      condition:
        - condition: state
          entity_id: fan.air_circulator
          state: "on"
        - condition: state
          entity_id: input_select.c_bedroom_circulator_mode
          state: "air conditioner"
        - condition: template
          value_template: "{{ states('sensor.c_weather_temperature') > states('sensor.c_bedroom_temperature') }}"
      action:
        - service: fan.turn_off
          target:
            entity_id: fan.air_circulator

    - alias: "[Bedroom Climate] Turn on Circulator on cool weather"
      trigger:
        - platform: state
          entity_id: sensor.c_weather_temperature
        - platform: state
          entity_id: sensor.c_bedroom_temperature
        - platform: state
          entity_id: input_select.c_bedroom_circulator_mode
      condition:
        - condition: state
          entity_id: fan.air_circulator
          state: "off"
        - condition: state
          entity_id: input_select.c_bedroom_circulator_mode
          state: "air conditioner"
        - condition: template
          value_template: "{{ states('sensor.c_weather_temperature') < states('sensor.c_bedroom_temperature') }}"
      action:
        - service: fan.turn_on
          target:
            entity_id: fan.air_circulator

    - alias: "[Bedroom Climate] Adjust Circulator Speed on bedroom temeperature"
      triggers:
        - platform: state
          entity_id: input_number.c_bedroom_target_temperature
        - platform: state
          entity_id: sensor.c_bedroom_temperature
        - platform: state
          entity_id: input_select.c_bedroom_circulator_mode
          to: "air conditioner"
          for: "00:00:03"
      conditions:
        - condition: state
          entity_id: fan.air_circulator
          state: "on"
        - condition: state
          entity_id: input_select.c_bedroom_circulator_mode
          state: "air conditioner"
      actions:
        - choose:
            - conditions:
                - condition: template
                  value_template: >
                    {{ states('sensor.c_bedroom_temperature') | float < states('input_number.c_bedroom_target_temperature') | float }}
              sequence:
                - service: fan.set_percentage
                  target:
                    entity_id: fan.air_circulator
                  data:
                    percentage: 25

            - conditions:
                - condition: template
                  value_template: >
                    {% set diff = states('sensor.c_bedroom_temperature') | float - states('input_number.c_bedroom_target_temperature') | float %}
                    {{ 0 <= diff < 1 }}
              sequence:
                - service: fan.set_percentage
                  target:
                    entity_id: fan.air_circulator
                  data:
                    percentage: 50

            - conditions:
                - condition: template
                  value_template: >
                    {% set diff = states('sensor.c_bedroom_temperature') | float - states('input_number.c_bedroom_target_temperature') | float %}
                    {{ 1 <= diff < 2 }}
              sequence:
                - service: fan.set_percentage
                  target:
                    entity_id: fan.air_circulator
                  data:
                    percentage: 75

            - conditions:
                - condition: template
                  value_template: >
                    {% set diff = states('sensor.c_bedroom_temperature') | float - states('input_number.c_bedroom_target_temperature') | float %}
                    {{ diff >= 2 }}
              sequence:
                - service: fan.set_percentage
                  target:
                    entity_id: fan.air_circulator
                  data:
                    percentage: 100

    - alias: "[Bedroom Climate] Turn off Turbine on hot weather"
      trigger:
        - platform: state
          entity_id: sensor.c_weather_temperature
        - platform: state
          entity_id: sensor.c_bedroom_temperature
        - platform: state
          entity_id: input_select.c_bedroom_turbine_mode
      condition:
        - condition: state
          entity_id: fan.bedroom_turbine
          state: "on"
        - condition: state
          entity_id: input_select.c_bedroom_turbine_mode
          state: "air conditioner"
        - condition: template
          value_template: "{{ states('sensor.c_weather_temperature') > states('sensor.c_bedroom_temperature') }}"
      action:
        - service: fan.turn_off
          target:
            entity_id: fan.bedroom_turbine

    - alias: "[Bedroom Climate] On Sleep Mode Started"
      trigger:
        - platform: state
          entity_id: input_select.c_bedroom_turbine_mode
          to: "sleep"
      action:
        - service: switch.turn_off
          target:
            entity_id: switch.bedroom_fan_plug
        - service: timer.cancel
          target:
            entity_id: timer.bedroom_sleep_mode_timer
        - service: timer.start
          target:
            entity_id: timer.bedroom_sleep_mode_timer

    - alias: "[Bedroom Climate] AutoCancel timer"
      trigger:
        - platform: state
          entity_id: input_select.c_bedroom_turbine_mode
          from: "sleep"
      action:
        - service: timer.cancel
          target:
            entity_id: timer.bedroom_sleep_mode_timer

    - alias: "[Bedroom Climate] On Sleep Mode Ended"
      trigger:
        - platform: state
          entity_id: timer.bedroom_sleep_mode_timer
          to: "idle"
      action:
        - service: input_select.select_option
          target:
            entity_id: input_select.c_bedroom_turbine_mode
          data:
            option: "{{states('sensor.c_bedroom_fan_last_mode')}}"

    - alias: "[Bedroom Climate] Turn on Fan heater every 30 minutes"
      mode: single
      triggers:
        - platform: time_pattern
          minutes: "/30"
      conditions:
        - condition: state
          entity_id: switch.c_bedroom_fan_heater
          state: "off"
        - condition: numeric_state
          entity_id: sensor.c_bedroom_temperature
          below: 20
        - condition: state
          entity_id: input_select.c_bedroom_turbine_mode
          state: "recuperator"
      actions:
        - service: switch.turn_on
          target:
            entity_id: switch.c_bedroom_fan_heater

    - alias: "[Bedroom Climate] Turn off Fan heater after timeout"
      mode: single
      triggers:
        - platform: template
          value_template: >
            {{ states('sensor.c_bedroom_fan_heater_active_time') | float(0) >= states('input_select.c_bedroom_fan_heater_timeout') | float(0) }}
      conditions:
        - condition: state
          entity_id: switch.c_bedroom_fan_heater
          state: "on"
      actions:
        - service: switch.turn_off
          target:
            entity_id: switch.c_bedroom_fan_heater

    - alias: "[Bedroom Climate] Fix Heater timeout"
      trigger:
        - platform: state
          entity_id: sensor.c_bedroom_temperature
      action:
        - service: script.turn_on
          target:
            entity_id: script.fix_main_heater_timeout

    - alias: "[Bedroom Climate] When window is open"
      trigger:
        - platform: state
          entity_id: binary_sensor.bedroom_window_sensor_contact
          to: "on"
          for: "00:00:05"
      action:
        - service: input_select.select_option
          target:
            entity_id: input_select.c_bedroom_turbine_mode
          data:
            option: "none"
        - service: fan.turn_off
          target:
            entity_id: fan.bedroom_turbine
        - service: input_select.select_option
          target:
            entity_id: input_select.c_bedroom_circulator_mode
          data:
            option: "air conditioner"

    - alias: "[Bedroom Climate] When window is closed"
      trigger:
        - platform: state
          entity_id: binary_sensor.bedroom_window_sensor_contact
          to: "off"
          for: "00:00:05"
      action:
        - service: input_select.select_option
          target:
            entity_id: input_select.c_bedroom_circulator_mode
          data:
            option: "none"
        - service: fan.turn_off
          target:
            entity_id: fan.air_circulator
        - service: input_select.select_option
          target:
            entity_id: input_select.c_bedroom_turbine_mode
          data:
            option: "air conditioner"
